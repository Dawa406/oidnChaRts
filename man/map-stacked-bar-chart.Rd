% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/charts.R, R/timeseries.R
\name{stacked_bar_chart}
\alias{googleViz_calendar_map}
\alias{hc_stacked_bar_chart}
\alias{plotly_stacked_bar_chart}
\alias{stacked_bar_chart}
\title{Stacked Bar Chart.}
\usage{
stacked_bar_chart(data, library = "highcharter", categories.column,
  categories.order = NA, subcategories.column, value.column,
  stacking.type = NA, subcategories.order = NA, return.data = FALSE)

hc_stacked_bar_chart(...)

plotly_stacked_bar_chart(...)

googleViz_calendar_map(...)
}
\arguments{
\item{data}{A dataframe, must be long-formatted.}

\item{library}{Which library to use, highchart is default.}

\item{categories.column}{Column containing the bar groupings (or categories), in a horizontally orientated barchart these will be the y-axis labels. Must be given as formula, i.e. ~country}

\item{categories.order}{Order for categories to appear in the bar chart, a character vector containing as many unique
categories as there ar in \code{data}. For \code{data_stacked_bar_chart} the order might be c("United Kingdom",
"Canada", "China", "Estonia", "Egypt", "France", "Germany", "Ireland", "Saudi Arabia", "Slovakia").
Default to NA, the categories order will be determined by their appearance in \code{data}.}

\item{subcategories.column}{Column containing different measures, i.e sub-categorisations. Must be given as formula, i.e. ~country}

\item{value.column}{Column containing bar values, i.e. lengths. Must be given as formula, i.e. ~country}

\item{stacking.type}{Stacking to apply to bars, default NULL. Possible values, c("percent", "normal")}

\item{subcategories.order}{Order for sub-categories, note for plotly the legend is ordered correctly but bars are reverse ordered}

\item{return.data}{Useful tool for debugging libraries that perform internal data wrangling, for instance highcharter. If TRUE the function will return the restructured data provided to the htmlwidget generating the output. Default to FALSE.}

\item{...}{all arguments other than \code{data} and \code{library} provided to \code{stacked_bar_chart}.}

\item{...}{all arguments other than \code{data} and \code{library} provided to \code{stacked_bar_chart}.}
}
\value{
Stacked bar chart of the class specified by the specified library.
}
\description{
\code{stacked_bar_chart} creates a stacked bar chart using the specified library, which can be used in the library's \%>\% workflow. Data must be provided in long format.

\code{hc_stacked_bar_chart} should not be used directly, it generates a stacked barchart using Plotly.

\code{plotly_stacked_bar_chart} should not be used directly, it generates a stacked barchart using Plotly.

\code{hc_stacked_bar_chart} should not be used directly, it generates a stacked barchart using Plotly.
}
\section{Warning}{
 These should be considered utility functions only, the magic is contained within the htmlwidget library,
 it is perfectly possible breaking changes to the library and/or the underling JavaScript library will
 break these. In such case, refer to http://ox-it.github.io/OxfordIDN_htmlwidgets for generic tutorials on
the widely used htmlwidget libraries and how to select an alternative visualisation library.
}
\examples{
\dontrun{
## Generate a stacked bar chart using highcharter
stacked_bar_chart(data = data_stacked_bar_chart,
library = "highcharter",
categories.column = ~country,
subcategories.column = ~activity,
value.column = ~hours)

## Generate a staced bar chart with bars stacked such that the subcategories totals within a
## category sum to 100\%, using plotly.
activity_order <- c("Unclassified", "Business", "Overlay", "Personal", "Teleconference")
country_order <- c("Canada", "China", "Egypt", "Estonia", "France", "Germany", "Ireland",
"Saudi Arabia", "Slovakia", "United Kingdom")
stacked_bar_chart(data = data_stacked_bar_chart,
               library = "plotly",
               categories.column = ~country,
               categories.order = country_order,
               subcategories.column = ~activity,
               value.column = ~hours,
               subcategories.order = activity_order,
               stacking.type = "percent")
}

}

